#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/select.h>
#include <time.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

int 	join_server()
{
	int sockfd = 0, n = 0;
    char recvBuff[1024];
    struct sockaddr_in serv_addr;
    struct protoent *proto;


    proto = getprotobyname("tcp");
    memset(recvBuff, '0',sizeof(recvBuff));
    if((sockfd = socket(AF_INET, SOCK_STREAM, proto->p_proto)) < 0)
    {
        printf("\n Error : Could not create socket \n");
        return 1;
    } 

    memset(&serv_addr, '0', sizeof(serv_addr)); 

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(5000); 

    if(inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)<=0)
    {
        printf("\n inet_pton error occured\n");
        return 1;
    } 
    if( connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
    {
       printf("\n Error : Connect Failed \n");
       return 1;
    } 

    while (1)
    {
        n = read(sockfd, recvBuff, sizeof(recvBuff)-1);
        recvBuff[n] = 0;
        printf("%d\n", sockfd);
        if(n < 0)
        {
            printf("\n Read error \n");
        }
        if(fputs(recvBuff, stdout) == EOF)
        {
            printf("\n Error : Fputs error\n");
        }
    } 
 

    return 0;
}

int 	create_server()
{
	int     listenfd = 0, i = 0;
    struct sockaddr_in serv_addr; 
    struct protoent *proto;
    int     connfd[4];
    char    recvbuf[1024];
    char    sendBuff[1025];
    time_t  ticks; 

    fd_set 	set;

    proto = getprotobyname("tcp");
    FD_ZERO(&set);
    listenfd = socket(AF_INET, SOCK_STREAM, proto->p_proto);
    printf("lobby = %d\n", listenfd);
    memset(&serv_addr, '0', sizeof(serv_addr));
    memset(sendBuff, '0', sizeof(sendBuff)); 

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    serv_addr.sin_port = htons(5000); 

    bind(listenfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)); 

    listen(listenfd, 10); 
    while(1)
    {
        connfd[i] = accept(listenfd, (struct sockaddr*)NULL, NULL);
        printf("%d\n", connfd[i]);
        if (connfd[i] != -1 && !FD_ISSET(connfd[i], &set))
        {
        	FD_SET(connfd[i], &set);
        	printf("FD set for select : %d\n", connfd[i]);
            i++;
        }
        snprintf(sendBuff, sizeof(sendBuff), "%.24s\r\n", ctime(&ticks));
        write(connfd[0], sendBuff, strlen(sendBuff)); 
    //    close(connfd);
    //    FD_CLR(connfd, &set);
        sleep(1);
     }
    for (i = 0; i++; i < 4)
    {
        close(connfd[i]);
        FD_CLR(connfd[i], &set);
    }
}

int 	main()
{
	char	buf[4];


	printf("Enter 1 for server, 2 for client :\n");
	read(1, buf, 2);
	//printf("%s", buf);
	if (atoi(buf) == 1)
	{
		create_server();
	}
	else
		join_server();
	return 0;
}
