/*
** gere_gameplay.c for bomberman in /home/infitek/Documents/Etna/Bomberman
** 
** Made by REBOUL Simon
** Login   <reboul_s@etna-alternance.net>
** 
** Started on  Sat May  5 14:55:43 2018 REBOUL Simon
** Last update Sat May 26 00:20:16 2018 REBOUL Simon
*/

#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <stdio.h>
#include "functions.h"
#include "bomberman.h"

void	gere_gameplay(t_game *game, SDL_Event event)
{
  t_player	*player;
  int		index;

  for (index = 0; game->players[index]->id != 1; index++);
  player = game->players[index];
  for (int i= 0; game->players[i] != NULL; i++)
    {
      game->players[i]->position->hitbox->x = game->players[i]->position->pos->x + 6;
      game->players[i]->position->hitbox->y = game->players[i]->position->pos->y + (28 * SCALE);
    }
  switch( event.type ){
  case SDL_KEYDOWN:
    switch( event.key.keysym.sym ){
    case SDLK_x:
      if (event.key.repeat == 0 && player->actual_bombs < player->nb_bombs)
	add_bomb(game, player);
      break;
    case SDLK_LEFT:
      if (player->position->yvel == 0)
	player->position->dir = 1;  
      player->position->xvel = -WALK_SPEED;
      break;
    case SDLK_RIGHT:
      if (player->position->yvel == 0)
	player->position->dir = 3;
      player->position->xvel = WALK_SPEED;
      break;
    case SDLK_UP:
      if (player->position->xvel == 0)
	player->position->dir = 5;
      player->position->yvel = -WALK_SPEED;
      break;
    case SDLK_DOWN:
      if (player->position->xvel == 0)
	player->position->dir = 2;
      player->position->yvel = WALK_SPEED;
      break;
    default:
      break;
    }
    break;

  case SDL_KEYUP:
    switch( event.key.keysym.sym ){
    case SDLK_LEFT:
      if( player->position->xvel < 0)
	player->position->xvel = 0;
      break;
    case SDLK_RIGHT:
      if( player->position->xvel > 0)
	player->position->xvel = 0;
      break;
    case SDLK_UP:
      if( player->position->yvel < 0)
	player->position->yvel = 0;
      break;
    case SDLK_DOWN:
      if( player->position->yvel > 0)
	player->position->yvel = 0;
      break;
    default:
      break;
    }
    break;
            
  default:
    break;
  }
  if (player->position->last_dir != player->position->dir)
    player->position->last_dir = player->position->dir;
  if (player->position->dir != player->position->last_dir && player->anim_tick > 0)
    player->anim_tick = 0;
  player->walking = 0;

  if ((player->position->xvel > 0 && player->position->hitbox->x < ((14 * MAP_MARGIN_X) - player->position->hitbox->w))
      || (player->position->xvel < 0 && player->position->hitbox->x > MAP_MARGIN_X))
    {
      player->walking = 1;
      player->position->pos->x += player->position->xvel;
    }
  if ((player->position->yvel > 0 && player->position->hitbox->y < ((14 * MAP_MARGIN_Y) - player->position->hitbox->h))
      || (player->position->yvel < 0 && player->position->hitbox->y > (MAP_MARGIN_Y) ))
    {
      player->walking = 1;
      player->position->pos->y += player->position->yvel;
    }

  for (int j = 0; game->players[j]; j++)
    {
      if ((j < 4 && game->players[j + 1] && Collision(game->players[j]->position->pos, game->players[j + 1]->position->pos) == 1)
	  || (j < 3 && game->players[j + 2]&& Collision(game->players[j]->position->pos, game->players[j + 2]->position->pos) == 1)
	  || (j < 2 && game->players[j + 3] && Collision(game->players[j]->position->pos, game->players[j + 3]->position->pos) == 1))
	{
	  game = recheck_z_index(game);
	}
    }

  t_object *next_obj = NULL;
  for (t_object *object = game->container->first; object != NULL;)
    {
      next_obj = object->next;
      if (object->is_solid == 1 && Collision(player->position->hitbox, object->hitbox) == 1)
	{
	  if (player->position->hitbox->x > object->hitbox->x
	      && player->position->hitbox->y + player->position->hitbox->h > object->hitbox->y + WALK_SPEED
	      && player->position->hitbox->y < (object->hitbox->y + object->hitbox->h) - WALK_SPEED)
	    player->position->pos->x += WALK_SPEED;
	  else if (player->position->hitbox->x < object->hitbox->x
		   && player->position->hitbox->y + player->position->hitbox->h > object->hitbox->y + WALK_SPEED
		   && player->position->hitbox->y < (object->hitbox->y + object->hitbox->h) - WALK_SPEED)
	    player->position->pos->x -= WALK_SPEED;
	  if (player->position->hitbox->y < object->hitbox->y
		   && player->position->hitbox->x + player->position->hitbox->w > object->hitbox->x + WALK_SPEED
		   && player->position->hitbox->x < (object->hitbox->x + object->hitbox->w) - WALK_SPEED)
	      player->position->pos->y -= WALK_SPEED;
	  else if (player->position->hitbox->y > object->hitbox->y
		   && player->position->hitbox->x + player->position->hitbox->w > object->hitbox->x + WALK_SPEED
		   && player->position->hitbox->x < (object->hitbox->x + object->hitbox->w) - WALK_SPEED)
	      player->position->pos->y += WALK_SPEED;
	}
      if (object->is_bomb == 1)
	{
	  if (object->is_solid == 0 && Collision(player->position->hitbox, object->hitbox) == 0)
	    object->is_solid = 1;
	  if (object->timer > 0)
	    object->timer--;
	  else if (object->timer == 0)
	    {
	      check_flames_position(game, object);
	      object->timer--;
	     del_object_from_container(game, object);
	    }
	}
      else if (object->is_flame == 1)
	{
	  if (object->timer > 0)
	    object->timer--;
	  else if (object->timer == 0)
	    {
	      if (object->distance_from_origin == 0)
		player->actual_bombs--;
	      object->timer--;
	      del_object_from_container(game, object);
	    }
	}
      else if (object->is_destruction_effect == 1)
	{
	  if (object->timer > 0)
	    object->timer--;
	  else if (object->timer == 0)
	    {
	      object->timer--;
	      del_object_from_container(game, object);
	    }
	}
      object = next_obj;
    }
  /*my_putstr("pos x = ");
  my_put_nbr(player->position->pos->x);
  my_putstr("pos y = ");
  my_put_nbr(player->position->pos->y);
  my_putchar('\n');*/
}

void		add_bomb(t_game *game, t_player *player)
{
  t_object	*bomb = malloc(sizeof(t_object) + 1);

  //bomb->sprite = malloc(sizeof(SDL_Surface) + 1);
  //bomb->sprite = game->flames_sprite;
  bomb->sprite_tex = game->flames_tex;
  bomb->tile_rect = malloc(sizeof(SDL_Rect) + 1);
  bomb->tile_rect->x = 0;
  bomb->tile_rect->y = 0;
  bomb->tile_rect->w = TILE_SIZE;
  bomb->tile_rect->h = TILE_SIZE;
  bomb->range = 3;
  player->actual_bombs++;
  bomb->owned_by = player->id;
  bomb->hitbox = malloc(sizeof(SDL_Rect) + 1);
  bomb->hitbox->x = my_ceil((player->position->hitbox->x  + (player->position->hitbox->w / 2)) / TILE_SIZE) * TILE_SIZE;
  bomb->hitbox->y = my_ceil((player->position->hitbox->y  + (player->position->hitbox->h / 2)) / TILE_SIZE) * TILE_SIZE;
  bomb->hitbox->w = TILE_SIZE;
  bomb->hitbox->h = TILE_SIZE;

  for (t_object *obj = game->container->first; obj != NULL; obj = obj->next)
    {
      if (obj->is_bomb == 1 && Collision(bomb->hitbox, obj->hitbox) == 1)
	{
	  free(bomb->tile_rect);
	  free(bomb->hitbox);
	  player->actual_bombs--;
	  return;
	}
    }
  bomb->is_solid = 0;
  bomb->is_over_player = 0;
  bomb->is_bomb = 1;
  bomb->is_flame = 0;
  bomb->anim_index = 0;
  bomb->anim_tick = 0;
  bomb->anim_duration = ANIM_SPEED;
  bomb->timer = 160;
  bomb->next = NULL;
  bomb->prev = NULL;
  bomb->parent = NULL;
  Mix_PlayChannel(1, game->audio->dropBomb, 0);
  add_object_to_container(game, bomb);
}

void	check_flames_position(t_game *game, t_object *bomb)
{
  Mix_PlayChannel(2, game->audio->bombExplode, 0);
  add_flame(game, bomb, 5, 0);
  for (int i = -1; i >= -bomb->range; i--)
    {
      if (add_flame(game, bomb, 4, i) == 1)
	i = -bomb->range - 2;
    }
  for (int i = 1; i <= bomb->range; i++) 
    {
	if (add_flame(game, bomb, 6, i) == 1)
	  i = bomb->range + 2;
    }
  for (int i = -1; i >= -bomb->range; i--) 
    {
      if (add_flame(game, bomb, 8, i) == 1)
	i = -bomb->range - 2;
    }
  for (int i = 1; i <= bomb->range; i++) 
    {  
      if (add_flame(game, bomb, 2, i) == 1)
	i = bomb->range + 2;
    }
}

int	add_flame(t_game *game, t_object *bomb, int flame_dir, int distance_from_origin)
{
  t_object	*flame = malloc(sizeof(t_object) + 1);

  //flame->sprite = malloc(sizeof(SDL_Surface) + 1);
  flame->flame_dir = flame_dir;
  flame->distance_from_origin = distance_from_origin;
  flame->bomb_range = bomb->range;
  flame->parent = bomb;
  //flame->sprite = game->flames_sprite;// IMG_Load("./images/Bombs.png");
  flame->sprite_tex = game->flames_tex;
  flame->is_solid = 0;
  flame->is_over_player = 1;
  flame->is_bomb = 0;
  flame->is_flame = 1;
  flame->tile_rect = malloc(sizeof(SDL_Rect) + 1);
  flame->tile_rect->x = TILE_SIZE;
  flame->tile_rect->y = TILE_SIZE * 5;
  flame->tile_rect->w = TILE_SIZE;
  flame->tile_rect->h = TILE_SIZE;
  flame->hitbox = malloc(sizeof(SDL_Rect) + 1);
  if (flame_dir == 2 || flame_dir == 8)
    {
      flame->hitbox->x = bomb->hitbox->x;
      flame->hitbox->y = bomb->hitbox->y + (distance_from_origin * TILE_SIZE);
    }
  else if (flame_dir == 4 || flame_dir == 6)
    {
      flame->hitbox->x = bomb->hitbox->x + (distance_from_origin * TILE_SIZE);
      flame->hitbox->y = bomb->hitbox->y;
    }
  else
    {
      flame->hitbox->x = bomb->hitbox->x;
      flame->hitbox->y = bomb->hitbox->y;
    }
  flame->hitbox->w = TILE_SIZE;
  flame->hitbox->h = TILE_SIZE;
  for (t_object *object = game->container->first; object != NULL; object = object->next)
    {
      if (object->is_flame == 0 && object->is_bomb == 0 && object->is_solid == 1
	  && Collision(object->hitbox, flame->hitbox) == 1)
	{
	  if (object->is_destructible == 1)
	    {
	      add_destroy_effect(game, object);
	      del_object_from_container(game, object);
	    }
	  return 1;
	}
      else if (object->is_bomb && Collision(object->hitbox, flame->hitbox) == 1)
	{
	  if (object->is_bomb == 1)
	    object->timer = 4;
	}
    }
  flame->anim_index = 0;
  flame->anim_tick = 0;
  flame->anim_duration = 2;
  flame->timer = 25;
  flame->prev = NULL;
  flame->next = NULL;
  add_object_to_container(game, flame);
  return 0;
}

void	add_destroy_effect(t_game *game, t_object *bomb)
{
  t_object	*flame = malloc(sizeof(t_object) + 1);

  flame->sprite_tex = game->flames_tex;
  flame->is_solid = 0;
  flame->is_over_player = 1;
  flame->is_bomb = 0;
  flame->is_flame = 0;
  flame->is_destruction_effect = 1;
  flame->tile_rect = malloc(sizeof(SDL_Rect) + 1);
  flame->tile_rect->x = TILE_SIZE;
  flame->tile_rect->y = TILE_SIZE * 5;
  flame->tile_rect->w = TILE_SIZE;
  flame->tile_rect->h = TILE_SIZE;
  flame->hitbox = malloc(sizeof(SDL_Rect) + 1);
  flame->hitbox->x = bomb->hitbox->x;
  flame->hitbox->y = bomb->hitbox->y;
  flame->hitbox->w = TILE_SIZE;
  flame->hitbox->h = TILE_SIZE;
  flame->anim_index = 0;
  flame->anim_tick = 0;
  flame->anim_duration = 2;
  flame->timer = 25;
  flame->prev = NULL;
  flame->next = NULL;
  add_object_to_container(game, flame);
  return;
}

int Collision(SDL_Rect *box1, SDL_Rect *box2)
{
  if((box2->x >= box1->x + box1->w)      // trop à droite
     || (box2->x + box2->w <= box1->x) // trop à gauche
     || (box2->y >= box1->y + box1->h) // trop en bas
     || (box2->y + box2->h <= box1->y))  // trop en haut
    return 0; 
  else
    return 1; 
}
